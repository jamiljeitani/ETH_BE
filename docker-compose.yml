version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tutoring_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-tutoring}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASS:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - tutoring_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-tutoring}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Node.js Backend Application
  backend:
    build: .
    container_name: tutoring_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 4000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-tutoring}
      DB_USER: ${DB_USER:-postgres}
      DB_PASS: ${DB_PASS:-postgres}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1d}
      REFRESH_SECRET: ${REFRESH_SECRET}
      REFRESH_EXPIRES_IN: ${REFRESH_EXPIRES_IN:-7d}
      SMTP_HOST: ${SMTP_HOST:-smtp.hostinger.com}
      SMTP_PORT: ${SMTP_PORT:-465}
      SMTP_SECURE: ${SMTP_SECURE:-true}
      SMTP_ADMIN_EMAIL: ${SMTP_ADMIN_EMAIL}
      SMTP_ADMIN_PASSWORD: ${SMTP_ADMIN_PASSWORD}
      SMTP_SCHEDULE_EMAIL: ${SMTP_SCHEDULE_EMAIL}
      SMTP_SCHEDULE_PASSWORD: ${SMTP_SCHEDULE_PASSWORD}
      SMTP_SUPPORT_EMAIL: ${SMTP_SUPPORT_EMAIL}
      SMTP_SUPPORT_PASSWORD: ${SMTP_SUPPORT_PASSWORD}
      SMTP_FINANCE_EMAIL: ${SMTP_FINANCE_EMAIL}
      SMTP_FINANCE_PASSWORD: ${SMTP_FINANCE_PASSWORD}
      SMTP_FEEDBACK_EMAIL: ${SMTP_FEEDBACK_EMAIL}
      SMTP_FEEDBACK_PASSWORD: ${SMTP_FEEDBACK_PASSWORD}
      NO_REPLY_EMAIL: ${NO_REPLY_EMAIL:-no-reply@elitetutorshub.net}
      STRIPE_SECRET: ${STRIPE_SECRET}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      FRONTEND_URL: ${FRONTEND_URL:-https://yourdomain.com}
      BASE_URL: ${BASE_URL:-https://api.yourdomain.com}
      TIMEZONE: ${TIMEZONE:-Asia/Beirut}
    ports:
      - "4000:4000"
    volumes:
      - uploads_data:/app/uploads
    networks:
      - tutoring_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tutoring_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - tutoring_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  tutoring_network:
    driver: bridge
