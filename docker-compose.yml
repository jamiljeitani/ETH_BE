# Docker Compose configuration for Elite Tutors Hub
# PRODUCTION: Ready for Hostinger VPS deployment
# DEV: Uncomment version line for local development
# version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tutoring_postgres
    restart: unless-stopped
    env_file:
      - production.env  # PRODUCTION: Use production environment file
      # - .env  # DEV: Uncomment for development
    environment:
      POSTGRES_DB: ${DB_NAME:-tutoring}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASS:-EliteTutors2024!SecureDB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # PRODUCTION: Simplified database setup
      # - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      # DEV: Uncomment for local development with init script
      # - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    # PRODUCTION: Remove port mapping to avoid conflicts
    # ports:
    #   - "5432:5432"
    # DEV: Uncomment for local development
    # ports:
    #   - "5432:5432"
    networks:
      - tutoring_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # Node.js Backend Application
  backend:
    build: .
    container_name: tutoring_backend
    restart: unless-stopped
    env_file:
      - production.env  # PRODUCTION: Use production environment file
      # - .env  # DEV: Uncomment for development
    environment:
      # PRODUCTION: Production environment variables
      NODE_ENV: production
      PORT: 4000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-tutoring}
      DB_USER: ${DB_USER:-postgres}
      DB_PASS: ${DB_PASS:-EliteTutors2024!SecureDB}  # Reads from production.env
      JWT_SECRET: ${JWT_SECRET:-EliteTutors2024!JWTSecretKeyForProductionUseOnly}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1d}
      REFRESH_SECRET: ${REFRESH_SECRET:-EliteTutors2024!RefreshSecretKeyForProductionUseOnly}
      REFRESH_EXPIRES_IN: ${REFRESH_EXPIRES_IN:-7d}
      SMTP_HOST: ${SMTP_HOST:-smtp.hostinger.com}
      SMTP_PORT: ${SMTP_PORT:-465}
      SMTP_SECURE: ${SMTP_SECURE:-true}
      SMTP_ADMIN_EMAIL: ${SMTP_ADMIN_EMAIL:-admin@elitetutorshub.net}
      SMTP_ADMIN_PASSWORD: ${SMTP_ADMIN_PASSWORD:-n*1YqDNJ}
      SMTP_SCHEDULE_EMAIL: ${SMTP_SCHEDULE_EMAIL:-schedule@elitetutorshub.net}
      SMTP_SCHEDULE_PASSWORD: ${SMTP_SCHEDULE_PASSWORD:-hk?Wa1X$}
      SMTP_SUPPORT_EMAIL: ${SMTP_SUPPORT_EMAIL:-support@elitetutorshub.net}
      SMTP_SUPPORT_PASSWORD: ${SMTP_SUPPORT_PASSWORD:-7t^MwabXJ;r&}
      SMTP_FINANCE_EMAIL: ${SMTP_FINANCE_EMAIL:-finance@elitetutorshub.net}
      SMTP_FINANCE_PASSWORD: ${SMTP_FINANCE_PASSWORD:-6I&2xXLuy&5O}
      SMTP_FEEDBACK_EMAIL: ${SMTP_FEEDBACK_EMAIL:-feedback@elitetutorshub.net}
      SMTP_FEEDBACK_PASSWORD: ${SMTP_FEEDBACK_PASSWORD:-C11U>&2On!}
      NO_REPLY_EMAIL: ${NO_REPLY_EMAIL:-no-reply@elitetutorshub.net}
      STRIPE_SECRET: ${STRIPE_SECRET:-}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET:-}
      IMAGEKIT_PUBLIC_KEY: ${IMAGEKIT_PUBLIC_KEY:-}
      IMAGEKIT_PRIVATE_KEY: ${IMAGEKIT_PRIVATE_KEY:-}
      IMAGEKIT_URL_ENDPOINT: ${IMAGEKIT_URL_ENDPOINT:-}
      FRONTEND_URL: ${FRONTEND_URL:-https://elitetutorshub.net}
      BASE_URL: ${BASE_URL:-https://api.elitetutorshub.net}
      TIMEZONE: ${TIMEZONE:-Asia/Beirut}
      
      # DEV: Uncomment for development environment
      # NODE_ENV: development
      # DB_HOST: localhost
      # DB_PASS: postgres
      # JWT_SECRET: dev_jwt_secret_key_for_development_only
      # REFRESH_SECRET: dev_refresh_secret_key_for_development_only
      # FRONTEND_URL: http://localhost:5173
      # BASE_URL: http://localhost:4000
    ports:
      - "4000:4000"
    volumes:
      - uploads_data:/app/uploads
    networks:
      - tutoring_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tutoring_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # PRODUCTION: Mount Nginx configuration for API reverse proxy
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    networks:
      - tutoring_network
    depends_on:
      - backend
    # PRODUCTION: Simplified health check for Nginx
    # healthcheck:
    #   test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/api/v1/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  tutoring_network:
    driver: bridge
